// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elettronica.proto

#include "elettronica.pb.h"
#include "elettronica.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace elettronica {

static const char* Allarme_method_names[] = {
  "/elettronica.Allarme/setError",
};

std::unique_ptr< Allarme::Stub> Allarme::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Allarme::Stub> stub(new Allarme::Stub(channel));
  return stub;
}

Allarme::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setError_(Allarme_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Allarme::Stub::setError(::grpc::ClientContext* context, const ::elettronica::Error& request, ::elettronica::Stop* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_setError_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::elettronica::Stop>* Allarme::Stub::AsyncsetErrorRaw(::grpc::ClientContext* context, const ::elettronica::Error& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::elettronica::Stop>::Create(channel_.get(), cq, rpcmethod_setError_, context, request);
}

Allarme::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Allarme_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Allarme::Service, ::elettronica::Error, ::elettronica::Stop>(
          std::mem_fn(&Allarme::Service::setError), this)));
}

Allarme::Service::~Service() {
}

::grpc::Status Allarme::Service::setError(::grpc::ServerContext* context, const ::elettronica::Error* request, ::elettronica::Stop* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SelezionaFrutto_method_names[] = {
  "/elettronica.SelezionaFrutto/getAnalisi",
};

std::unique_ptr< SelezionaFrutto::Stub> SelezionaFrutto::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SelezionaFrutto::Stub> stub(new SelezionaFrutto::Stub(channel));
  return stub;
}

SelezionaFrutto::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getAnalisi_(SelezionaFrutto_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SelezionaFrutto::Stub::getAnalisi(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::elettronica::Scarto* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getAnalisi_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::elettronica::Scarto>* SelezionaFrutto::Stub::AsyncgetAnalisiRaw(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::elettronica::Scarto>::Create(channel_.get(), cq, rpcmethod_getAnalisi_, context, request);
}

SelezionaFrutto::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      SelezionaFrutto_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SelezionaFrutto::Service, ::elettronica::Posizion, ::elettronica::Scarto>(
          std::mem_fn(&SelezionaFrutto::Service::getAnalisi), this)));
}

SelezionaFrutto::Service::~Service() {
}

::grpc::Status SelezionaFrutto::Service::getAnalisi(::grpc::ServerContext* context, const ::elettronica::Posizion* request, ::elettronica::Scarto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace elettronica

