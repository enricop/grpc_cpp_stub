// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elettronica.proto
#ifndef GRPC_elettronica_2eproto__INCLUDED
#define GRPC_elettronica_2eproto__INCLUDED

#include "elettronica.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace elettronica {

class Allarme final {
 public:
  static constexpr char const* service_full_name() {
    return "elettronica.Allarme";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status setError(::grpc::ClientContext* context, const ::elettronica::Error& request, ::elettronica::Stop* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elettronica::Stop>> AsyncsetError(::grpc::ClientContext* context, const ::elettronica::Error& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elettronica::Stop>>(AsyncsetErrorRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elettronica::Stop>* AsyncsetErrorRaw(::grpc::ClientContext* context, const ::elettronica::Error& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status setError(::grpc::ClientContext* context, const ::elettronica::Error& request, ::elettronica::Stop* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elettronica::Stop>> AsyncsetError(::grpc::ClientContext* context, const ::elettronica::Error& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elettronica::Stop>>(AsyncsetErrorRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::elettronica::Stop>* AsyncsetErrorRaw(::grpc::ClientContext* context, const ::elettronica::Error& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_setError_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status setError(::grpc::ServerContext* context, const ::elettronica::Error* request, ::elettronica::Stop* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setError() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setError(::grpc::ServerContext* context, const ::elettronica::Error* request, ::elettronica::Stop* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetError(::grpc::ServerContext* context, ::elettronica::Error* request, ::grpc::ServerAsyncResponseWriter< ::elettronica::Stop>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setError<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_setError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setError() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setError(::grpc::ServerContext* context, const ::elettronica::Error* request, ::elettronica::Stop* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setError() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::elettronica::Error, ::elettronica::Stop>(std::bind(&WithStreamedUnaryMethod_setError<BaseClass>::StreamedsetError, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setError(::grpc::ServerContext* context, const ::elettronica::Error* request, ::elettronica::Stop* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetError(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elettronica::Error,::elettronica::Stop>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setError<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_setError<Service > StreamedService;
};

class SelezionaFrutto final {
 public:
  static constexpr char const* service_full_name() {
    return "elettronica.SelezionaFrutto";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getAnalisi(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::elettronica::Scarto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elettronica::Scarto>> AsyncgetAnalisi(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elettronica::Scarto>>(AsyncgetAnalisiRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elettronica::Scarto>* AsyncgetAnalisiRaw(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getAnalisi(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::elettronica::Scarto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elettronica::Scarto>> AsyncgetAnalisi(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elettronica::Scarto>>(AsyncgetAnalisiRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::elettronica::Scarto>* AsyncgetAnalisiRaw(::grpc::ClientContext* context, const ::elettronica::Posizion& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_getAnalisi_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getAnalisi(::grpc::ServerContext* context, const ::elettronica::Posizion* request, ::elettronica::Scarto* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getAnalisi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getAnalisi() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getAnalisi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAnalisi(::grpc::ServerContext* context, const ::elettronica::Posizion* request, ::elettronica::Scarto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAnalisi(::grpc::ServerContext* context, ::elettronica::Posizion* request, ::grpc::ServerAsyncResponseWriter< ::elettronica::Scarto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getAnalisi<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getAnalisi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getAnalisi() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getAnalisi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAnalisi(::grpc::ServerContext* context, const ::elettronica::Posizion* request, ::elettronica::Scarto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAnalisi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getAnalisi() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::elettronica::Posizion, ::elettronica::Scarto>(std::bind(&WithStreamedUnaryMethod_getAnalisi<BaseClass>::StreamedgetAnalisi, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getAnalisi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAnalisi(::grpc::ServerContext* context, const ::elettronica::Posizion* request, ::elettronica::Scarto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAnalisi(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elettronica::Posizion,::elettronica::Scarto>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getAnalisi<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getAnalisi<Service > StreamedService;
};

}  // namespace elettronica


#endif  // GRPC_elettronica_2eproto__INCLUDED
