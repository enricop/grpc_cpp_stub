// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elettronica.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Elettronica {
  public static partial class Allarme
  {
    static readonly string __ServiceName = "elettronica.Allarme";

    static readonly grpc::Marshaller<global::Elettronica.Error> __Marshaller_Error = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elettronica.Error.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elettronica.Stop> __Marshaller_Stop = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elettronica.Stop.Parser.ParseFrom);

    static readonly grpc::Method<global::Elettronica.Error, global::Elettronica.Stop> __Method_setError = new grpc::Method<global::Elettronica.Error, global::Elettronica.Stop>(
        grpc::MethodType.Unary,
        __ServiceName,
        "setError",
        __Marshaller_Error,
        __Marshaller_Stop);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Elettronica.ElettronicaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Allarme</summary>
    public abstract partial class AllarmeBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Elettronica.Stop> setError(global::Elettronica.Error request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Allarme</summary>
    public partial class AllarmeClient : grpc::ClientBase<AllarmeClient>
    {
      /// <summary>Creates a new client for Allarme</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AllarmeClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Allarme that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AllarmeClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AllarmeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AllarmeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Elettronica.Stop setError(global::Elettronica.Error request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return setError(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Elettronica.Stop setError(global::Elettronica.Error request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_setError, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Elettronica.Stop> setErrorAsync(global::Elettronica.Error request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return setErrorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Elettronica.Stop> setErrorAsync(global::Elettronica.Error request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_setError, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AllarmeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AllarmeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AllarmeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_setError, serviceImpl.setError).Build();
    }

  }
  public static partial class SelezionaFrutto
  {
    static readonly string __ServiceName = "elettronica.SelezionaFrutto";

    static readonly grpc::Marshaller<global::Elettronica.Posizion> __Marshaller_Posizion = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elettronica.Posizion.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elettronica.Scarto> __Marshaller_Scarto = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elettronica.Scarto.Parser.ParseFrom);

    static readonly grpc::Method<global::Elettronica.Posizion, global::Elettronica.Scarto> __Method_getAnalisi = new grpc::Method<global::Elettronica.Posizion, global::Elettronica.Scarto>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getAnalisi",
        __Marshaller_Posizion,
        __Marshaller_Scarto);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Elettronica.ElettronicaReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of SelezionaFrutto</summary>
    public abstract partial class SelezionaFruttoBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Elettronica.Scarto> getAnalisi(global::Elettronica.Posizion request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SelezionaFrutto</summary>
    public partial class SelezionaFruttoClient : grpc::ClientBase<SelezionaFruttoClient>
    {
      /// <summary>Creates a new client for SelezionaFrutto</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SelezionaFruttoClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SelezionaFrutto that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SelezionaFruttoClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SelezionaFruttoClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SelezionaFruttoClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Elettronica.Scarto getAnalisi(global::Elettronica.Posizion request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAnalisi(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Elettronica.Scarto getAnalisi(global::Elettronica.Posizion request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getAnalisi, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Elettronica.Scarto> getAnalisiAsync(global::Elettronica.Posizion request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAnalisiAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Elettronica.Scarto> getAnalisiAsync(global::Elettronica.Posizion request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getAnalisi, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SelezionaFruttoClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SelezionaFruttoClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SelezionaFruttoBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getAnalisi, serviceImpl.getAnalisi).Build();
    }

  }
}
#endregion
